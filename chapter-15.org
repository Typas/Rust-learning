#+TITLE: 智慧型指標

* 先備知識

指標是一種指向記憶體位址的變數。在 Rust 中最常見的是以參考型式 ~&~ 存在，不過沒有額外開銷。
而智慧型指標則是用在有更間接的情況，如指向元資料的情形。 Rust 的智慧型指標是自 C++11 來的，能提供比參照更強力的使用。
通常智慧型指標會與結構連用，而其中的 ~Deref~ 與 ~Drop~ 兩種特徵能讓你更便利的使用智慧型指標。

** 標準函數庫的智慧型指標
- ~Box<T>~ 能提供在 heap 上的記憶體配置。
- ~Rc<T>~ 能允許資料的多重所有權，並在無擁有者時釋放資料。
- ~Ref<T>~ 、 ~RefMut<T>~ ，以 ~RefCell<T>~ 存取，能讓借用規則從編譯時檢查轉向在執行時檢查，有可能造成記憶體洩漏。

* ~Box<T>~

** 使用情境
- 有需要在執行期才能確定大小，並要精準需求記憶體的型態。
- 有大量需要轉移所有權的資料，但需要保證轉移時資料不會被複製。
- 當想擁有一個只關注有特定特徵的型態的值，而不是一個特定型態的值。

** 遞迴型態
遞迴型態是一個會包含自身型態的型態。因為這種巢狀結構理論上會增長至無限大，所以 Rust 無法推斷型態的大小。如下的程式會編不過：

#+BEGIN_SRC rust
enum List {
    Cons(i32, List),
    Nil,
}
#+END_SRC

而 ~Box<T>~ 則因為是指標，編譯器可以確定其大小，因此編譯不會有問題：

#+BEGIN_SRC rust
enum List {
    Cons(i32, Box<List>),
    Nil,
}
#+END_SRC

* ~Rc<T>~
有時一個值會需要有多個擁有者。舉例來說，資料結構中的 graph ，會有多個 edge 指向同一個 node 。這個 node 會被這些 edge 所共有，直到所有指向 node 的 edge 都被刪除才會釋放掉這個 node 。
Rust 中的 ~Rc<T>~ 就是因應此情況而生。它會追蹤資料的擁有者的數量，到 0 時會丟棄資料。
~Rc<T>~ 只能在單執行緒的情況下使用，如果要在多執行緒達成同樣效果，需要用 ~Arc<T>~ 。

** 用 ~Rc<T>~ 分享資料
以下的情況用 ~Box<T>~ 會出現編譯錯誤：

#+BEGIN_SRC rust
enum List {
    Cons(i32, Box<List>),
    Nil,
}

use crate::List::{Cons, Nil};

fn main() {
    let a = Cons(5, Box::new(Cons(10, Box::new(Nil))));
    let b = Cons(3, Box::new(a));
    let c = Cons(4, Box::new(a));
}
#+END_SRC

改成 ~Rc<T>~ 後則可以通過編譯：

#+BEGIN_SRC rust
enum List {
    Cons(i32, Rc<List>),
    Nil,
}

use crate::List::{Cons, Nil};
use std::rc::Rc;

fn main() {
    let a = Cons(5, Rc::new(Cons(10, Rc::new(Nil))));
    let b = Cons(3, Rc::clone(&a));
    let c = Cons(4, Rc::clone(&a));
}
#+END_SRC

請注意 ~Rc::clone()~ 這方法不會進行複製，而是增加參照的計數。

* ~RefCell<T>~
「內變性」是一種 Rust 的設計模式。讓你能在不變參照中變動其所指向的資料，其必定會用到 ~unsafe~ 來規避 Rust 的常見檢查。
~RefCell<T>~ 讓借用與變動規則從編譯時確認改為執行時才檢查，當違反規則時，程式會 panic 。
預設的靜態分析很保守，在某些特定情況下會無法保證程式的正確性，從而給出編譯錯誤。因為這些情況無法使用靜態分析保證，而又能在實際執行時不違反規則，所以有 ~RefCell<T>~ 型態提供使用。
與 ~Rc<T>~ 相同，僅能用在單執行緒的情形下。 ~RefCell<T>~ 的多執行緒需要使用 ~Mutex<T>~ 。

** 使用情況：模擬物件
測試替身是一個常用概念，用來替代測試程式所相依的部分。模擬物件是測試替身的一種，能夠記錄測試之中發生的事，讓你能夠斷定在對的地方發生對的事情。
以下是一個測試情境：我們需要寫個程式驗證使用者的請求次數是否達到上限，若超過則發送訊息。

#+BEGIN_SRC rust
pub trait Messenger {
    fn send(&self, msg: &str);
}

pub struct LimitTracker<'a, T: Messenger> {
    messenger: &'a T,
    value: usize,
    max: usize,
}

impl<'a, T> LimitTracker<'a, T>
where
    T: Messenger,
{
    pub fn new(messenger: &T, max: usize) -> LimitTracker<T> {
        LimitTracker {
            messenger,
            value: 0,
            max,
        }
    }

    pub fn set_value(&mut self, value: usize) {
        self.value = value;

        let percentage_of_max = self.value as f64 / self.max as f64;

        if percentage_of_max >= 1.0 {
            self.messenger.send("Error: You are over your quota!");
        }
    }
}
#+END_SRC

模擬物件只要做出 ~Messenger~ 特徵就行了。

#+BEGIN_SRC rust
#[cfg(test)]
mod tests {
    use super::*;

    struct MockMessenger {
        sent_messages: Vec<String>,
    }

    impl MockMessenger {
        fn new() -> MockMessenger {
            MockMessenger {
                sent_messages: vec![],
            }
        }
    }

    impl Messenger for MockMessenger {
        fn send(&self, message: &str) {
            self.sent_messages.push(String::from(message)); // error here
        }
    }

    #[test]
    fn it_sends_an_over_limit_message() {
        let mock_messenger = MockMessenger::new();
        let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);

        limit_tracker.set_value(120);

        assert_eq!(mock_messenger.sent_messages.len(), 1);
    }
}
#+END_SRC

實際上的 ~send()~ 實作上會出現為了追蹤訊息而變動內容，但是在參數上又不能變更為 ~&mut self~ ，所以這時需要用到 ~RefCell<T>~ 來繞過限制。

#+BEGIN_SRC rust
// --snip--
{
    use std::cell::RefCell;
    struct MockMessenger {
        sent_messages: RefCell<Vec<String>>,
    }
}
// --snip--
#+END_SRC

* 循環參照
當同時使用 ~Rc<T>~ 與 ~RefCell<T>~ 時，就有機會遇到循環參照，這會造成參照計數無法歸零，而造成記憶體洩漏的問題。
預防的辦法是將 ~Rc<T>~ 變數使用 ~Rc::downgrade()~ 轉成 ~Weak<T>~ 型態。計數則從 ~strong_count~ 轉為從 ~weak_count~ 計算。與原本的不同點在於， ~strong_count~ 必須為 0 時才丟棄內容，而 ~weak_count~ 不用。
強參照表示你分享了 ~Rc<T>~ 的實例，而弱參照則沒有這種關係表示。因此包含到弱參照的循環參照會在強參照的計數為 0 時被破壞掉。
因為弱參照所指向的值可能被丟棄，所以需要以 ~upgrade()~ 方法回傳的 ~Option<Rc<T>>~ 確認值是否仍存在。

** 例子
以下為一個很簡單的樹狀結構。如果我們需要往回連，則會遇到循環參照的情況。

#+BEGIN_SRC rust
use std::cell::RefCell;
use std::rc::Rc;

#[derive(Debug)]
struct Node {
    value: i32,
    children: RefCell<Vec<Rc<Node>>>,
}

fn main() {
    let leaf = Rc::new(Node {
        value: 3,
        children: RefCell::new(vec![]),
    });

    let branch = Rc::new(Node {
        value: 5,
        children: RefCell::new(vec![Rc::clone(&leaf)]),
    })
}
#+END_SRC

此時改用 ~RefCell<Weak<Node>>~ 避免：

#+BEGIN_SRC rust
use std::cell::RefCell;
use std::rc::{Rc, Weak};

#[derive(Debug)]
struct Node {
    value: i32,
    parent: RefCell<Weak<Node>>,
    children: RefCell<Vec<Rc<Node>>>,
}

fn main() {
    let leaf = Rc::new(Node {
        value: 3,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![]),
    });

    println!("leaf parent = {:?}", leaf.parent.borrow().upgrade());

    let branch = Rc::new(Node {
        value: 5,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![Rc::clone(&leaf)]),
    });

    *leaf.parent.borrow_mut() = Rc::downgrade(&branch);

    println!("leaf parent = {:?}", leaf.parent.borrow().upgrade());
}
#+END_SRC

** 強弱參照計數的差別
結構請見上方。

#+BEGIN_SRC rust
use std::cell::RefCell;
use std::rc::{Rc, Weak};

fn main() {
    let leaf = Rc::new(Node {
        value: 3,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![]),
    });

    println!(
        "leaf strong = {}, weak = {}",
        Rc::strong_count(&leaf),
        Rc::weak_count(&leaf),
    );

    {
        let branch = Rc::new(Node {
            value: 5,
            parent: RefCell::new(Weak::new()),
            children: RefCell::new(vec![Rc::clone(&leaf)]),
        });

        ,*leaf.parent.borrow_mut() = Rc::downgrade(&branch);

        println!(
            "branch strong = {}, weak = {}",
            Rc::strong_count(&branch),
            Rc::weak_count(&branch),
        );

        println!(
            "leaf strong = {}, weak = {}",
            Rc::strong_count(&leaf),
            Rc::weak_count(&leaf),
        );
    }

    println!("leaf parent = {:?}", leaf.parent.borrow().upgrade());
    println!(
        "leaf strong = {}, weak = {}",
        Rc::strong_count(&leaf),
        Rc::weak_count(&leaf),
    );
}
#+END_SRC

* 智慧型指標的選擇
- ~Rc<T>~ 允許同個資料有多個擁有者； ~Box<T>~ 與 ~RefCell<T>~ 只允許單個擁有者。
- ~Box<T>~ 允許不變或可變的借用； ~Rc<T>~ 只允許不變的借用； ~RefCell<T>~ 允許在執行期才檢查不變與可變的借用。
- ~RefCell<T>~ 本身不變但是其借用的值仍可以改動。
也可以進行組合，如 ~Rc<RefCell<T>>~ 可達成多擁有者的可變借用。

* ~Deref~ 特徵
這個特徵讓你能自訂解參照運算子 ~*~ 的行為。

#+BEGIN_SRC rust
fn main() {
    let x = 5;
    let y = Box::new(x);

    assert_eq!(5, x);
    assert_eq!(5, *y); // deref imply here
}
#+END_SRC

** 自訂智慧型指標
來簡單的自製一個類似 ~Box<T>~ 的型態，以了解 ~Deref~ 的功能。

#+BEGIN_SRC rust
use std::ops::Deref;

struct MyBox<T>(T);

impl<T> MyBox<T> {
    fn new(x: T) -> MyBox<T> {
        MyBox(x)
    }
}

impl<T> Deref for MyBox<T> {
    type Target = T;

    fn deref(&self) -> &T {
        &self.0
    }
}
#+END_SRC

** 隱藏的強解參照
強解參照是一個 Rust 中的方便功能，只有在有 ~Deref~ 特徵的型態會自動使用。
這在我們傳一個參照進函數時，如果參照本身並沒有對應到函數的參數，則會自動轉換成 ~deref()~ 所回傳的型態，如上面的 ~&MyBox<T>~ 會被轉為 ~&T~ 。
另一方面，強解參照也讓程式碼中不會充斥著成對的 ~&~ 與 ~*~ ，讓程式更易讀。

*** 強解參照與可變性
Rust 的強解參照與可變性會有三種對應關係：
- 當 ~T: Deref<Target=U>~ 時，自 ~&T~ 轉成 ~&U~ 。
- 當 ~T: DerefMut<Target=U>~ 時，自 ~&mut T~ 轉成 ~&mut U~ 。
- 當 ~T: Deref<Target=U>~ 時，自 ~&mut T~ 轉成 ~&U~ 。

* ~Drop~ 特徵
~Drop~ 是另一個智慧型指標的重點，這個特徵讓你能自訂生命期要結束時會發生什麼事。 C++ 中，在 ~new~ 之後，若是忘記 ~delete~ ，就會造成記憶體洩漏，從而使程式越來越肥而當機。在 Rust ，這些可以藉由實作 ~Drop~ 與生命期間的配合達成自動釋放，解決記憶體洩漏的可能。

** 實作

#+BEGIN_SRC rust
struct CustomSmartPointer {
    data: String,
}

impl Drop for CustomSmartPointer {
    fn drop(&mut self) {
        println!("Dropping with data `{}`!", self.data);
    }
}
#+END_SRC

** 提早丟棄
在生命期結束時系統會自動呼叫 ~drop()~ 。若要提早讓程式丟棄變數，不能直接呼叫 ~drop()~ ，而是要使用 ~std::mem::drop()~ 強制一個值在其生命期結束前就被丟棄。
如果有變數 ~c~ 要被手動丟棄， ~c.drop()~ 會報錯，必須使用 ~drop(c)~ 才能執行。只有沒有 ~Copy~ 特徵的型態才能被提早丟棄。

* 回到[[file:README.md][目錄]]
