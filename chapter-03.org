#+TITLE:  基本程式

以下 =<argument>= 代表必須的引數， =[optional]= 代表選填的引數。 =expr= 代表運算式， =/* --snip-- */= 代表省略的敘述式， =type= 代表型態， =value= 代表值， =name= 代表變數名稱。
Rust 宣告可以無初始值，但宣告時須指定資料型態。並且要在後面有定義。

* 變數
- 宣告： =let [mut] <name>[: type] = <expr>;= 或是 =let [mut] <name>: <type>;= 。

#+BEGIN_SRC rust
let a: i32;
let mut b = 60;
#+END_SRC

* 常數
- 宣告： =const <name>: <type> = <expr>;= 。

#+BEGIN_SRC rust
const PI: f64 = 3.14159;
#+END_SRC

* 元組
- 宣告： =let <name>[: (<type1>, <type2>, ...)] = (<var1>, <var2>, ...);= 或 =let <name>: (<type1>, <type2>, ...);= 。
- 解構：  =let (<name1>, <name2>, ...) = <tuple_name> ;= 。其中的型態可以用底線 =_= 代表模式配對的任意型態，由編譯器推導出；解構的變數也能以 =_= 來取代不需要的變數。
- 索引： =<name>.<n>= ，其中 =n= 代表索引值，從 0 開始。
 
#+BEGIN_SRC rust
let tup = (20, 30.6, '早');
let top: (i32, u64, f32);
let (x, y, _) = tup;
let z = tup.2;
#+END_SRC

* 陣列
- 宣告： =let <name>[: [type; number]] = <[value1, value2, ...]>;=  或是 =let <name>: [<type> ; <number>];= ，其中 =number= 代表元素個數。
- 存取：  =<name>[<i>]= ，其中 =i= 代表索引值，與 C/C++ 相同。

* 函數
- 宣告： =fn <name>([name1: type1, name2: type2, ...]) [-> type] { /* --snip-- */ }=
- 回傳值有 =return= 接的運算式與最後的運算式兩種。

* 註解
除了 C++ 的以 =//= 開頭的單行註解，與以 =/*= 與 =*/= 包含的區段註解外，還有一些說明文件用的註解，詳細請看[[https://doc.rust-lang.org/reference/comments.html][官方文件說明]]。

* 條件判斷
- 形式： =if <expr> { /* --snip-- */ } [else <expr> { /* --snip */ }]=
- 以 =else if= 處理多重條件
- =if= 本身可以是個運算式

* 迴圈
- 形式有三種： =loop= 、 =while= 與 =for= 。
- =loop= 可以是個運算式，接在 =break= 後的運算式是 =loop= 的回傳值。
- 其餘兩種都只能是表達式。

** 形式
- =loop { /* --snip-- */ }= ，以 =break= 離開或陷入無窮迴圈中
- =while <expr> { /* --snip-- */ }=
- =for <name> in <Collection> { /* --snip-- */ }=

* 回到[[file:README.md][目錄]]
