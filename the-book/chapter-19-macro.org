#+TITLE: 巨集

* 分類
總共有四種，一種宣告式巨集與三種程序式巨集。

- 宣告式巨集
- 程序式巨集
  - 自訂衍生巨集
  - 類屬性巨集
  - 類函數巨集

* 與函數的差別
基本上，巨集是一段用來寫程式碼的程式碼，又被稱為「元程式」。相對於函數，因為巨集的展開時間在編譯時，所以巨集可以用來自動生成特徵的實作，而函數則無法。

* 宣告式巨集
這算是最常寫的巨集，會有與配對類似的寫法。舉例來說， ~vec!~ 這個巨集的定義可以被簡化成如此：

#+BEGIN_SRC rust
#[macro_export]
macro_rules! vec {
    ( $( $x: expr ),* ) => {
        {
            let mut temp_vec = Vec::new();
            $(
                temp_vec.push($x);
            )*
            temp_vec
        }
    };
}
#+END_SRC

詳細的語法請見[[https://doc.rust-lang.org/reference/macros-by-example.html][官方文件]]。首先，最外層的小括號代表對應的模式分支，對應關係十分類似配對，但最後是以分號結尾。再來的 ~$~ 十分類似 shell script 的 ~$~ ，而小括號再次代表了一個對應關係，其中的 ~$x: expr~ 代表任何 Rust 的量敘會在巨集內被當成 ~$x~ 看待。括號後接的 ~,~ 則是選擇性的，而更後面的 ~*~ 是代表前面的模式會被重複 0 次以上。
未來的 Rust 會出現另一種宣告式巨集，以解決目前的 ~macro_rules!~ 在部分情況下發生的問題，屆時舊的會不推薦撰寫。不過對巨集使用來說，這兩種應該不會有所區別。

* 程序式巨集
這是巨集的第二種型態，寫法與函數比較類似。這種巨集會把一些程式碼當作輸入，處理這些程式碼，再輸出一些程式碼。
要建立程序式巨集時，必須要在有特殊 crate 型態的 crate 中定義這些巨集。這是 Rust 還沒整合的部分，未來可能會消除這個限制。

#+BEGIN_SRC rust
use proc_macro;

#[some_attribute]
pub fn some_name(input: TokenStream) -> TokenStream {
}
#+END_SRC

** 自訂衍生巨集

** 類屬性巨集

** 類函數巨集
