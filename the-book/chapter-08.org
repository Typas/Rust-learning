#+TITLE: Collections

* Vector

** 建立

*** 空的 Vector
有 ~Vec::new()~ 與 ~Vec::with_capacity()~ 可用。

#+BEGIN_SRC rust
let v: Vec<i32> = Vec::new();
#+END_SRC

*** 有數個值的 Vector
有個方便的巨集 ~vec!~ ，裡面的元素會讓編譯器自行推導出型態。

#+BEGIN_SRC rust
let v = vec![1, 2, 3];
#+END_SRC

** 更新
~push()~ 方法可以用來更新 vector ，但需要為可變的 vector 。

#+BEGIN_SRC rust
let mut v = Vec::new();
v.push(5);
v.push(6);
#+END_SRC

** 丟棄
跟其他有在 heap 上配置記憶體的結構一樣， vector 在生命期結束時也會丟棄它所有的內容。

** 讀取
有兩種方法能取得元素的參照，一種用索引取，一種用 ~get()~ 方法。索引取需要合用 ~&~ 與 ~[]~ ，會直接給出參照或是出現 panic 把你程式關掉； ~get()~ 方法則會回傳一個 ~Option<&T>~ 的值。不變參照會與 ~push()~ 因參照原則互相衝突，請注意兩者之間的生命期。

*** 索引取參照語法
#+BEGIN_SRC rust
let v = vec![1, 2, 3];

let third: &i32 = &v[2];
println!("The third element is {}", third);
#+END_SRC

*** ~get()~ 方法
#+BEGIN_SRC rust
let v = vec![1, 2, 3];

match v.get(2) {
    Some(third) => println!("The third element is {}", third),
    None => println!("There is no third element."),
}
#+END_SRC

** 迭代器
分為兩種，不變式與可變式。

*** 不變式迭代
#+BEGIN_SRC rust
let v = vec![100, 32, 57];
for i in &v {
    println!("{}", i);
}
#+END_SRC

*** 可變式迭代
請注意這邊需要用解參照運算子 ~*~ 取值。
#+BEGIN_SRC rust
let mut v = vec![100, 32, 57];
for i in &mut v {
    *i += 50;
}
#+END_SRC

** 列舉與 ~vec!~ 結合使用
概念是 ~vec!~ 只能用同一個型態，而列舉可以存不同型態。結合列舉與配對可以做到個別處理每個內部型態。

#+BEGIN_SRC rust
enum SpreadsheetCell {
    Int(i32),
    Float(f64),
    Text(String),
}

let row = vec![
    SpreadsheetCell::Int(3),
    SpreadsheetCell::Text(String::from("blue")),
    SpreadsheetCell::Float(10.12),
];
#+END_SRC

* String

** 定義
標準函數庫提供的可成長、可操作、有所有權的 UTF-8 編碼字串型態。切片型態為 ~&str~ 。

** 建立
*** 空字串
與 vector 相同，有 ~new()~ 與 ~with_capacity()~ 兩種關聯函數。

#+BEGIN_SRC rust
let s = String::new();
#+END_SRC

*** ~to_string()~
只要有實作 ~Display~ 特徵的結構都可以使用。

#+BEGIN_SRC rust
let data = "initial contents";
let s = data.to_string();

let s = "initial contents".to_string();
#+END_SRC

*** ~String::from()~
從字串切片建立。

#+BEGIN_SRC rust
let s = String::from("initial contents");
#+END_SRC

** 更新

*** 附加
被操作的字串必須為可變的。

**** ~push_str()~
附加字串切片。

#+BEGIN_SRC rust
let mut s = String::from("foo");
s.push_str("bar");
#+END_SRC

**** ~push()~
附加字元。

#+BEGIN_SRC rust
let mut s = String::from("lo");
s.push('l');
#+END_SRC

*** 連接

**** ~+~ 運算子
要注意所有權的轉移關係與型態。

#+BEGIN_SRC rust
let s1 = String::from("Hello, ");
let s2 = String::from("world!");
let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used
#+END_SRC

**** ~format!~ 巨集
不會轉移所有權，概念概似於 C 的 ~sprintf()~ 。

#+BEGIN_SRC rust
let s1 = String::from("tic");
let s2 = String::from("tac");
let s3 = String::from("toe");

let s = format!("{}-{}-{}", s1, s2, s3);
#+END_SRC

** 索引
不支援。
~String~ 型態雖然是包裝後的 ~Vec<u8>~ ，但因為 UTF-8 字元編碼的關係，會難以直接對應到一個字元。

** 切片
這邊的索引是照 byte 在算的，所以下面的切片實際是兩個中文字。

#+BEGIN_SRC rust
let hello = "你好";
let s = &hello[0..4];
#+END_SRC

** 迭代

*** ~chars()~
取得字串內的每個 UTF-8 字元，但是部分語言會有獨立聲調的字元存在。

#+BEGIN_SRC rust
for c in "नमस्ते".chars() {
    println!("{}", c);
}
#+END_SRC

*** ~bytes()~
取得每個 byte 的數值。

* Hash Map
因為使用頻率相對低，所以不被包在預載的函數庫中。

** 建立

*** 空容器
可用 ~new()~ 或是 ~with_capacity()~ 或是 ~with_capacity_and_hasher()~ 或是 ~with_hasher()~ 建立。

#+BEGIN_SRC rust
use std::collections::HashMap;

let mut scores = HashMap::new();
scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Yellow"), 50);
#+END_SRC

*** ~collect()~
可以將元組 vector 轉成 hash map 。而元組 vector 則可以用結構的 ~iter()~ 方法結合 ~zip()~ 方法組成。

#+BEGIN_SRC rust
use std::collections::HashMap;

let teams = vec![String::from("Blue"), String::from("Yellow")];
let initial_scores = vec![10, 50];

let scores: HashMap<_, _> = teams.iter()
    .zip(initial_scores.iter())
    .collect();
#+END_SRC

** 所有權
在使用了 ~insert()~ 方法後，所有權會從變數被轉移到 hash map 上，所以原有的變數會無法使用。

** 存取

*** ~get()~
參數為 key ，會回傳 ~Option<&value>~ 。

#+BEGIN_SRC rust
use std::collections::HashMap;

let mut scores = HashMap::new();
scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Yellow"), 50);

let team_name = String::from("Blue");
let score = scores.get(&team_name);
#+END_SRC

*** 迴圈

#+BEGIN_SRC rust
use std::collections::HashMap;

let mut scores = HashMap::new();
scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Yellow"), 50);

for (key, value) in &scores {
    println!("{}: {}", key, value);
}
#+END_SRC

** 更新

*** 覆寫原值
因為一個 key 只會對應到一個值，所以同個 key 再做 ~insert()~ 時就會覆寫原有的值。

#+BEGIN_SRC rust
use std::collections::HashMap;

let mut scores = HashMap::new();
scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Blue"), 25);
#+END_SRC

*** 不存在才新增值
因為有些 hash map 會需要避免覆寫，可以用 ~entry()~ 方法回傳的 ~Entry~ 這個列舉來確認。
~or_insert()~ 這個方法會在 ~Entry~ 的 key 不存在於 hash map 時，新增一個元組進 hash map 。

#+BEGIN_SRC rust
use std::collections::HashMap;

let mut scores = HashMap::new();
scores.insert(String::from("Blue"), 10);

scores.entry(String::from("Yellow")).or_insert(50);
scores.entry(String::from("Blue")).or_insert(50);
#+END_SRC

*** 僅更新現有值
與上面的情景完全相反的情況也很常見, 可根據回傳值來操作達成。
回傳的型態為 ~&mut V~ ，所以需要解參照。

#+BEGIN_SRC rust
use std::collections::HashMap;

let text = "hello world wonderful world";
let mut map = HashMap::new();

for word in text.split_whitespace() {
    let count = map.entry(word).or_insert(0);
    *count += 1;
}
#+END_SRC

** 雜湊函數
預設是較高安全度的，也可以指定不同的 hasher 以達成最佳化。

* 回到[[file:README.md][目錄]]
